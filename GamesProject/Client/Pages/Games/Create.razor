@page "/games/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Games</h3>
<hr />
<br />

<EditForm Model="@game" OnValidSubmit="CreateGame">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Genre: </label>
        <div>
            <InputSelect @bind-Value="game.GenreId" class="form-control">
                <option value="">-- Select Genre</option>
                @if (Genres != null)
                {
                    foreach (var genre in Genres)
                    {
                        <option value="@genre.Id">@genre.Name</option>
                    }
                 }
            </InputSelect>
            <ValidationMessage For="@(() => game.GenreId)" />
        </div>
    </div>
    <div class="form-group">
        <label>AgeRating: </label>
        <div>
            <InputSelect @bind-Value="game.AgeRatingId" class="form-control">
                <option value="">-- Select AgeRating</option>
                @if (AgeRatings != null)
                {
                    foreach (var ageRating in AgeRatings)
                    {
                        <option value="@ageRating.Id">@ageRating.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => game.AgeRatingId)" />
        </div>
    </div>

    <div class="form-group">
        <label>GamePublisher: </label>
        <div>
            <InputSelect @bind-Value="game.GamePublisherId" class="form-control">
                <option value="">-- Select GamePublisher</option>
                @if (GamePublishers != null)
                {
                    foreach (var gamePublisher in GamePublishers)
                    {
                        <option value="@gamePublisher.Id">@gamePublisher.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => game.GamePublisherId)" />
        </div>
    </div>

    <div class="form-group">
        <label>GameName: </label>
        <div>
            <InputText @bind-Value="game.Name" class="form-control" />
            <ValidationMessage For="@(()=> game.Name)" />
        </div>
    </div>

    <div class="form-group">
        <label>ReleaseDate: </label>
        <div>
            <InputText @bind-Value="game.ReleaseDate" class="form-control" />
            <ValidationMessage For="@(()=> game.ReleaseDate)" />
        </div>
    </div>

    <div class="form-group">
        <label>GamePrice: </label>
        <div>
            <InputNumber @bind-Value="game.Price" class="form-control" />
            <ValidationMessage For="@(()=> game.Price)" />
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Create Game
    </button>
</EditForm>



@code {
    Game game = new Game();

    private IList<Genre> Genres;
    private IList<AgeRating> AgeRatings;
    private IList<GamePublisher> GamePublishers;

    protected async override Task OnInitializedAsync()
    {
        Genres = await _client.GetFromJsonAsync<List<Genre>>($"{Endpoints.GenresEndpoint}");
        AgeRatings = await _client.GetFromJsonAsync<List<AgeRating>>($"{Endpoints.AgeRatingsEndpoint}");
        GamePublishers = await _client.GetFromJsonAsync<List<GamePublisher>>($"{Endpoints.GamePublishersEndpoint}");

    }

    private async Task CreateGame()
    {
        await _client.PostAsJsonAsync(Endpoints.GamesEndpoint, game);
        _navManager.NavigateTo("/games");
    }

}


